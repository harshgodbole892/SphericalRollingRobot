/*
 <<<<<<<<<<<<<<< Multi-body Dynamics Simualtion, Estimation and Control Lab - McGill University >>>>>>>>>>>>>>
 
 
 Hierarchy     : Cable Driven Parallel Robots
 Model         : 1 DOF Flexible Cable
 Function Name : Example12a
 Function Type : Dynamic Simulation
 
 Description   : The following function contains dynamic sumulation of a
                 single DOF constrained CDPR.
 
 Example-L-0-1 is named using the following convention:
 L - Lumped-mass model type
 0 - Dynamics simulation
 1 - Variable mass/stiffness lumped-mass method.
 
 Revisions: 
 
 2017-09-06: Template creation
 
 Function Details:
 
 Information on addtional functionality can be added here.
 
 References:
 
 [1] Dynamic Modelling and Control of Cable-actuated systems, Harsh Godbole, Master's Thesis, McGill University, 2017.
 
 Armadillo documentation is available at:
 http://arma.sourceforge.net/docs.html
 
 Tempelate by Harsh Godbole.
 Reference credits to Dr. James Richard Forbes and Ryan Caverly.
 
 */
/*
#include "L01ControlLaws.hpp"

//Function definations for Control Laws start here: 

//Main PD Feedback and Feed Forward control law
vec control ( vec        r_a_zw,
              mat        C_ba,
              vec        v_a_zw_a,
              vec        omega_b_ba,
              constants  cst)
{
    double f_a_B_ext;
    
    // You fill in! This is part of the PD control law (the feedback law):
    f_a_B_ext = - (cst.kp_trans * r_a_zw)
                - (cst.kd_trans * v_a_zw_a);
    
    // You fill in! This is part of the PD control law (the feedback law).
    m_b_Bz_ext =  ( 0.5 * cst.kp_rot * (vex((C_ba) - (C_ba.Trans))))
                - ( cst.kd_rot * omega_b_ba);
    
    // This is the PD control law (the feedback law).
    f_ext = [f_a_B_ext; m_b_Bz_ext];
    
    // This is the Feed Forward control law:
    f_ext_FF << (- cst.mB * cst.g_a) << endr
             << (- cross(cst.c_b_Bz) * C_ba * cst.g_a)

    control_out = (f_ext + f_ext_FF);
} */
